# yamllint disable rule:comments-indentation
---
###############################################################################
#                           Authelia Configuration                            #
###############################################################################

## Note: the container by default expects to find this file at /config/configuration.yml.

## Certificates directory specifies where Authelia will load trusted certificates (public portion) from in addition to
## the system certificates store.
## They should be in base64 format, and have one of the following extensions: *.cer, *.crt, *.pem.
# certificates_directory: /config/certificates/

## The theme to display: light, dark, grey, auto.
theme: light

identity_validation:
  reset_password:
    ## The secret used to generate JWT tokens when validating user identity by email confirmation. JWT Secret can also be
    ## set using a secret: https://www.authelia.com/c/secrets
    jwt_secret: {{ .JwtSecret }}

## Default redirection URL
##
## If user tries to authenticate without any referer, Authelia does not know where to redirect the user to at the end
## of the authentication process. This parameter allows you to specify the default redirection URL Authelia will use
## in such a case.
##
## Note: this parameter is optional. If not provided, user won't be redirected upon successful authentication.
#default_redirection_url: https://home.example.com/

## Set the default 2FA method for new users and for when a user has a preferred method configured that has been
## disabled. This setting must be a method that is enabled.
## Options are totp, webauthn, mobile_push.
default_2fa_method: ""

##
## Server Configuration
##
server:

  address: unix:///var/snap/platform/current/authelia.socket
  ## The address to listen on.
  #host: 0.0.0.0

  ## The port to listen on.
  #port: 9091

  ## Set the single level path Authelia listens on.
  ## Must be alphanumeric chars and should not contain any slashes.
  #path: "authelia"

  ## Set the path on disk to Authelia assets.
  ## Useful to allow overriding of specific static assets.
  # asset_path: /config/assets/
  
  endpoints:
    ## Enables the pprof endpoint.
    enable_pprof: false

    ## Enables the expvars endpoint.
    enable_expvars: false

  ## Disables writing the health check vars to /app/.healthcheck.env which makes healthcheck.sh return exit code 0.
  ## This is disabled by default if either /app/.healthcheck.env or /app/healthcheck.sh do not exist.
  disable_healthcheck: false

  ## Authelia by default doesn't accept TLS communication on the server port. This section overrides this behaviour.
  tls:
    ## The path to the DER base64/PEM format private key.
    key: ""

    ## The path to the DER base64/PEM format public certificate.
    certificate: ""

    ## The list of certificates for client authentication.
    client_certificates: []

  ## Server headers configuration/customization.
  headers:

    ## The CSP Template. Read the docs.
    csp_template: ""

    ## Server Buffers configuration.
    # buffers:

    ## Buffers usually should be configured to be the same value.
    ## Explanation at https://www.authelia.com/c/server#buffer-sizes
    ## Read buffer size adjusts the server's max incoming request size in bytes.
    ## Write buffer size does the same for outgoing responses.

    ## Read buffer.
    # read: 4096

    ## Write buffer.
    # write: 4096

    ## Server Timeouts configuration.
    # timeouts:

    ## Read timeout.
    # read: 6s

    ## Write timeout.
    # write: 6s

    ## Idle timeout.
    # idle: 30s

##
## Log Configuration
##
log:
  ## Level of verbosity for logs: info, debug, trace.
  level: trace

  ## Format the logs are written as: json, text.
  format: text

  ## File path where the logs will be written. If not set logs are written to stdout.
  # file_path: /config/authelia.log

  ## Whether to also log to stdout when a log_file_path is defined.
  # keep_stdout: false

##
## Telemetry Configuration
##
telemetry:

  ##
  ## Metrics Configuration
  ##
  metrics:
    ## Enable Metrics.
    enabled: false

    ## The address to listen on for metrics. This should be on a different port to the main server.port value.
    address: tcp://0.0.0.0:9959

      ## Metrics Server Buffers configuration.
      # buffers:

      ## Read buffer.
      # read: 4096

      ## Write buffer.
      # write: 4096

      ## Metrics Server Timeouts configuration.
      # timeouts:

      ## Read timeout.
      # read: 6s

      ## Write timeout.
      # write: 6s

      ## Idle timeout.
    # idle: 30s

##
## TOTP Configuration
##
## Parameters used for TOTP generation.
totp:
  ## Disable TOTP.
  disable: false

  ## The issuer name displayed in the Authenticator application of your choice.
  issuer: {{ .Domain }}

  ## The TOTP algorithm to use.
  ## It is CRITICAL you read the documentation before changing this option:
  ## https://www.authelia.com/c/totp#algorithm
  algorithm: sha1

  ## The number of digits a user has to input. Must either be 6 or 8.
  ## Changing this option only affects newly generated TOTP configurations.
  ## It is CRITICAL you read the documentation before changing this option:
  ## https://www.authelia.com/c/totp#digits
  digits: 6

  ## The period in seconds a one-time password is valid for.
  ## Changing this option only affects newly generated TOTP configurations.
  period: 30

  ## The skew controls number of one-time passwords either side of the current one that are valid.
  ## Warning: before changing skew read the docs link below.
  skew: 1
  ## See: https://www.authelia.com/c/totp#input-validation to read
  ## the documentation.

  ## The size of the generated shared secrets. Default is 32 and is sufficient in most use cases, minimum is 20.
  secret_size: 32

##
## WebAuthn Configuration
##
## Parameters used for WebAuthn.
webauthn:
  ## Disable Webauthn.
  disable: false

  ## Adjust the interaction timeout for Webauthn dialogues.
  timeout: 60s

  ## The display name the browser should show the user for when using Webauthn to login/register.
  display_name: Authelia

  ## Conveyance preference controls if we collect the attestation statement including the AAGUID from the device.
  ## Options are none, indirect, direct.
  attestation_conveyance_preference: indirect

  ## User verification controls if the user must make a gesture or action to confirm they are present.
  ## Options are required, preferred, discouraged.
  user_verification: preferred

  ##
  ## Duo Push API Configuration
  ##
  ## Parameters used to contact the Duo API. Those are generated when you protect an application of type
  ## "Partner Auth API" in the management panel.
  # duo_api:
  # disable: false
  # hostname: api-123456789.example.com
  # integration_key: ABCDEF
  ## Secret can also be set using a secret: https://www.authelia.com/c/secrets
  # secret_key: 1234567890abcdefghifjkl
  # enable_self_enrollment: false

##
## NTP Configuration
##
## This is used to validate the servers time is accurate enough to validate TOTP.
ntp:
  ## NTP server address.
  address: "time.cloudflare.com:123"

  ## NTP version.
  version: 4

  ## Maximum allowed time offset between the host and the NTP server.
  max_desync: 3s

  ## Disables the NTP check on startup entirely. This means Authelia will not contact a remote service at all if you
  ## set this to true, and can operate in a truly offline mode.
  disable_startup_check: false

  ## The default of false will prevent startup only if we can contact the NTP server and the time is out of sync with
  ## the NTP server more than the configured max_desync. If you set this to true, an error will be logged but startup
  ## will continue regardless of results.
  disable_failure: false

##
## Authentication Backend Provider Configuration
##
## Used for verifying user passwords and retrieve information such as email address and groups users belong to.
##
## The available providers are: `file`, `ldap`. You must use only one of these providers.
authentication_backend:

  ## Password Reset Options.
  password_reset:
    ## Disable both the HTML element and the API for reset password functionality.
    disable: false

    ## External reset password url that redirects the user to an external reset portal. This disables the internal reset
    ## functionality.
    custom_url: ""

  ## The amount of time to wait before we refresh data from the authentication backend. Uses duration notation.
  ## To disable this feature set it to 'disable', this will slightly reduce security because for Authelia, users will
  ## always belong to groups they belonged to at the time of login even if they have been removed from them in LDAP.
  ## To force update on every request you can set this to '0' or 'always', this will increase processor demand.
  ## See the below documentation for more information.
  ## Duration Notation docs:  https://www.authelia.com/c/common#duration-notation-format
  ## Refresh Interval docs: https://www.authelia.com/c/1fa#refresh-interval
  refresh_interval: 5m

    ##
    ## LDAP (Authentication Provider)
    ##
    ## This is the recommended Authentication Provider in production
    ## because it allows Authelia to offload the stateful operations
    ## onto the LDAP service.
{{if .IsActivated}}
  ldap:
    ## The LDAP implementation, this affects elements like the attribute utilised for resetting a password.
    ## Acceptable options are as follows:
    ## - 'activedirectory' - For Microsoft Active Directory.
    ## - 'custom' - For custom specifications of attributes and filters.
    ## This currently defaults to 'custom' to maintain existing behaviour.
    ##
    ## Depending on the option here certain other values in this section have a default value, notably all of the
    ## attribute mappings have a default value that this config overrides, you can read more about these default values
    ## at https://www.authelia.com/c/ldap#defaults
    implementation: custom

    ## The url to the ldap server. Format: <scheme>://<address>[:<port>].
    ## Scheme can be ldap or ldaps in the format (port optional).
    address: ldap://127.0.0.1

    ## The dial timeout for LDAP.
    # timeout: 5s

    ## Use StartTLS with the LDAP connection.
    # start_tls: false

    ## The distinguished name of the container searched for objects in the directory information tree.
    ## See also: additional_users_dn, additional_groups_dn.
    base_dn: dc=syncloud,dc=org

    attributes:
      username: cn
      group_name: cn
      # mail: mail
      # display_name: displayName

    ## The additional_users_dn is prefixed to base_dn and delimited by a comma when searching for users.
    ## i.e. with this set to OU=Users and base_dn set to DC=a,DC=com; OU=Users,DC=a,DC=com is searched for users.
    additional_users_dn: ou=users

    ## The users filter used in search queries to find the user profile based on input filled in login form.
    ## Various placeholders are available in the user filter which you can read about in the documentation which can
    ## be found at: https://www.authelia.com/c/ldap#users-filter-replacements
    ##
    ## Recommended settings are as follows:
    ## - Microsoft Active Directory: (&({username_attribute}={input})(objectCategory=person)(objectClass=user))
    ## - OpenLDAP:
    ##   - (&({username_attribute}={input})(objectClass=person))
    ##   - (&({username_attribute}={input})(objectClass=inetOrgPerson))
    ##
    ## To allow sign in both with username and email, one can use a filter like
    ## (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
    users_filter: (&({username_attribute}={input})(objectClass=inetOrgPerson))

    ## The additional_groups_dn is prefixed to base_dn and delimited by a comma when searching for groups.
    ## i.e. with this set to OU=Groups and base_dn set to DC=a,DC=com; OU=Groups,DC=a,DC=com is searched for groups.
    additional_groups_dn: ou=groups

    ## The groups filter used in search queries to find the groups based on relevant authenticated user.
    ## Various placeholders are available in the groups filter which you can read about in the documentation which can
    ## be found at: https://www.authelia.com/c/ldap#groups-filter-replacements
    ##
    ## If your groups use the `groupOfUniqueNames` structure use this instead:
    ##    (&(uniqueMember={dn})(objectClass=groupOfUniqueNames))
    groups_filter: (&(memberUid={username})(objectClass=posixGroup))    

    ## Follow referrals returned by the server.
    ## This is especially useful for environments where read-only servers exist. Only implemented for write operations.
    # permit_referrals: false

    ## The username and password of the admin user.
    user: 'cn=admin,dc=syncloud,dc=org'
    ## Password can also be set using a secret: https://www.authelia.com/c/secrets
    password: 'syncloud'
{{else}}
    ##
    ## File (Authentication Provider)
    ##
    ## With this backend, the users database is stored in a file which is updated when users reset their passwords.
    ## Therefore, this backend is meant to be used in a dev environment and not in production since it prevents Authelia
    ## to be scaled to more than one instance. The options under 'password' have sane defaults, and as it has security
    ## implications it is highly recommended you leave the default values. Before considering changing these settings
    ## please read the docs page below:
    ## https://www.authelia.com/r/passwords#tuning
    ##
    ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness
    ##
  file:
    path: /snap/platform/current/config/authelia/users.yaml
    # watch: false
    # search:
    # email: false
    # case_insensitive: false
    # password:
    # algorithm: argon2
    # argon2:
    # variant: argon2id
    # iterations: 3
    # memory: 65536
    # parallelism: 4
    # key_length: 32
    # salt_length: 16
    # scrypt:
    # iterations: 16
    # block_size: 8
    # parallelism: 1
    # key_length: 32
    # salt_length: 16
    # pbkdf2:
    # variant: sha512
    # iterations: 310000
    # salt_length: 16
    # sha2crypt:
    # variant: sha512
    # iterations: 50000
    # salt_length: 16
    # bcrypt:
    # variant: standard
  # cost: 12
{{end}}

##
## Password Policy Configuration.
##
password_policy:

  ## The standard policy allows you to tune individual settings manually.
  standard:
    enabled: true

    ## Require a minimum length for passwords.
    min_length: 8

    ## Require a maximum length for passwords.
    max_length: 0

    ## Require uppercase characters.
    require_uppercase: true

    ## Require lowercase characters.
    require_lowercase: true

    ## Require numeric characters.
    require_number: true

    ## Require special characters.
    require_special: true

  ## zxcvbn is a well known and used password strength algorithm. It does not have tunable settings.
  zxcvbn:
    enabled: false

    ## Configures the minimum score allowed.
    min_score: 3

##
## Access Control Configuration
##
## Access control is a list of rules defining the authorizations applied for one resource to users or group of users.
##
## If 'access_control' is not defined, ACL rules are disabled and the 'bypass' rule is applied, i.e., access is allowed
## to anyone. Otherwise restrictions follow the rules defined.
##
## Note: One can use the wildcard * to match any subdomain.
## It must stand at the beginning of the pattern. (example: *.example.com)
##
## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct.
##
## Definition: A 'rule' is an object with the following keys: 'domain', 'subject', 'policy' and 'resources'.
##
## - 'domain' defines which domain or set of domains the rule applies to.
##
## - 'subject' defines the subject to apply authorizations to. This parameter is optional and matching any user if not
##    provided. If provided, the parameter represents either a user or a group. It should be of the form
##    'user:<username>' or 'group:<groupname>'.
##
## - 'policy' is the policy to apply to resources. It must be either 'bypass', 'one_factor', 'two_factor' or 'deny'.
##
## - 'resources' is a list of regular expressions that matches a set of resources to apply the policy to. This parameter
##   is optional and matches any resource if not provided.
##
## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies.
access_control:
  ## Default policy can either be 'bypass', 'one_factor', 'two_factor' or 'deny'. It is the policy applied to any
  ## resource if there is no policy to be applied to the user.
  default_policy: one_factor

    # networks:
    # - name: internal
    #   networks:
    # - 10.10.0.0/16
    # - 192.168.2.0/24
    # - name: VPN
    #   networks: 10.9.0.0/16

    # rules:
    ## Rules applied to everyone
    # - domain: 'public.example.com'
    #   policy: bypass

    ## Domain Regex examples. Generally we recommend just using a standard domain.
    # - domain_regex: '^(?P<User>\w+)\.example\.com$'
    #   policy: one_factor
    # - domain_regex: '^(?P<Group>\w+)\.example\.com$'
    #   policy: one_factor
    # - domain_regex:
    #  - '^appgroup-.*\.example\.com$'
    #  - '^appgroup2-.*\.example\.com$'
    #   policy: one_factor
    # - domain_regex: '^.*\.example\.com$'
    #   policy: two_factor

    # - domain: 'secure.example.com'
    #   policy: one_factor
    ## Network based rule, if not provided any network matches.
    #   networks:
    # - internal
    # - VPN
    # - 192.168.1.0/24
    # - 10.0.0.1

    # - domain:
    # - 'secure.example.com'
    # - 'private.example.com'
    #   policy: two_factor

    # - domain: 'singlefactor.example.com'
    #   policy: one_factor

    ## Rules applied to 'admins' group
    # - domain: 'mx2.mail.example.com'
    #   subject: 'group:admins'
    #   policy: deny

    # - domain: '*.example.com'
    #   subject:
    # - 'group:admins'
    # - 'group:moderators'
    #   policy: two_factor

    ## Rules applied to 'dev' group
    # - domain: 'dev.example.com'
    #   resources:
    # - '^/groups/dev/.*$'
    #   subject: 'group:dev'
    #   policy: two_factor

    ## Rules applied to user 'john'
    # - domain: 'dev.example.com'
    #   resources:
    # - '^/users/john/.*$'
    #   subject: 'user:john'
    #   policy: two_factor

    ## Rules applied to user 'harry'
    # - domain: 'dev.example.com'
    #   resources:
    # - '^/users/harry/.*$'
    #   subject: 'user:harry'
    #   policy: two_factor

    ## Rules applied to user 'bob'
    # - domain: '*.mail.example.com'
    #   subject: 'user:bob'
    #   policy: two_factor
    # - domain: 'dev.example.com'
    #   resources:
    #     - '^/users/bob/.*$'
    #   subject: 'user:bob'
  #   policy: two_factor

##
## Session Provider Configuration
##
## The session cookies identify the user once logged in.
## The available providers are: `memory`, `redis`. Memory is the provider unless redis is defined.
session:
  ## The name of the session cookie.
  name: authelia_session

  ## Sets the Cookie SameSite value. Possible options are none, lax, or strict.
  ## Please read https://www.authelia.com/c/session#same_site
  same_site: lax

  ## The secret to encrypt the session data. This is only used with Redis / Redis Sentinel.
  ## Secret can also be set using a secret: https://www.authelia.com/c/secrets
  # secret: insecure_session_secret

  ## The value for expiration, inactivity, and remember_me_duration are in seconds or the duration notation format.
  ## See: https://www.authelia.com/c/common#duration-notation-format
  ## All three of these values affect the cookie/session validity period. Longer periods are considered less secure
  ## because a stolen cookie will last longer giving attackers more time to spy or attack.

  ## The time before the cookie expires and the session is destroyed if remember me IS NOT selected.
  expiration: 1h

  ## The inactivity time before the session is reset. If expiration is set to 1h, and this is set to 5m, if the user
  ## does not select the remember me option their session will get destroyed after 1h, or after 5m since the last time
  ## Authelia detected user activity.
  inactivity: 5m

  ## The time before the cookie expires and the session is destroyed if remember me IS selected.
  ## Value of -1 disables remember me.
  remember_me: 1M
  
  cookies:
    - domain: '{{ .Domain }}'
      authelia_url: '{{ .AuthUrl }}'
      default_redirection_url: '{{ .DeviceUrl }}'
      name: 'authelia_session'
      
    ##
    ## Redis Provider
    ##
    ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness
    ##
    # redis:
    # host: 127.0.0.1
    # port: 6379
    ## Use a unix socket instead
    # host: /var/run/redis/redis.sock

    ## Username used for redis authentication. This is optional and a new feature in redis 6.0.
    # username: authelia

    ## Password can also be set using a secret: https://www.authelia.com/c/secrets
    # password: authelia

    ## This is the Redis DB Index https://redis.io/commands/select (sometimes referred to as database number, DB, etc).
    # database_index: 0

    ## The maximum number of concurrent active connections to Redis.
    # maximum_active_connections: 8

    ## The target number of idle connections to have open ready for work. Useful when opening connections is slow.
    # minimum_idle_connections: 0

    ## The Redis HA configuration options.
    ## This provides specific options to Redis Sentinel, sentinel_name must be defined (Master Name).
    # high_availability:
    ## Sentinel Name / Master Name.
    # sentinel_name: mysentinel

    ## Specific username for Redis Sentinel. The node username and password is configured above.
    # sentinel_username: sentinel_specific_user

    ## Specific password for Redis Sentinel. The node username and password is configured above.
    # sentinel_password: sentinel_specific_pass

    ## The additional nodes to pre-seed the redis provider with (for sentinel).
    ## If the host in the above section is defined, it will be combined with this list to connect to sentinel.
    ## For high availability to be used you must have either defined; the host above or at least one node below.
    # nodes:
    # - host: sentinel-node1
    #   port: 6379
    # - host: sentinel-node2
    #   port: 6379

    ## Choose the host with the lowest latency.
    # route_by_latency: false

    ## Choose the host randomly.
  # route_randomly: false

##
## Regulation Configuration
##
## This mechanism prevents attackers from brute forcing the first factor. It bans the user if too many attempts are made
## in a short period of time.
regulation:
  ## The number of failed login attempts before user is banned. Set it to 0 to disable regulation.
  max_retries: 3

  ## The time range during which the user can attempt login before being banned. The user is banned if the
  ## authentication failed 'max_retries' times in a 'find_time' seconds window. Find Time accepts duration notation.
  ## See: https://www.authelia.com/c/common#duration-notation-format
  find_time: 2m

  ## The length of time before a banned user can login again. Ban Time accepts duration notation.
  ## See: https://www.authelia.com/c/common#duration-notation-format
  ban_time: 5m

    ##
    ## Storage Provider Configuration
    ##
    ## The available providers are: `local`, `mysql`, `postgres`. You must use one and only one of these providers.
storage:
    ## The encryption key that is used to encrypt sensitive information in the database. Must be a string with a minimum
    ## length of 20. Please see the docs if you configure this with an undesirable key and need to change it, you MUST use
    ## the CLI to change this in the database if you want to change it from a previously configured value.
  encryption_key: {{ .EncryptionKey }}

    ##
    ## Local (Storage Provider)
    ##
    ## This stores the data in a SQLite3 Database.
    ## This is only recommended for lightweight non-stateful installations.
    ##
    ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness
    ##
  local:
    ## Path to the SQLite3 Database.
    path: /var/snap/platform/current/authelia.sqlite3

    ##
    ## MySQL / MariaDB (Storage Provider)
    ##
    # mysql:
    # host: 127.0.0.1
    # port: 3306
    # database: authelia
    # username: authelia
    ## Password can also be set using a secret: https://www.authelia.com/c/secrets
    # password: mypassword
    # timeout: 5s

    ##
    ## PostgreSQL (Storage Provider)
    ##
    # postgres:
    # host: 127.0.0.1
    # port: 5432
    # database: authelia
    # schema: public
    # username: authelia
    ## Password can also be set using a secret: https://www.authelia.com/c/secrets
    # password: mypassword
    # timeout: 5s

##
## Notification Provider
##
## Notifications are sent to users when they require a password reset, a Webauthn registration or a TOTP registration.
## The available providers are: filesystem, smtp. You must use only one of these providers.
notifier:
  ## You can disable the notifier startup check by setting this to true.
  disable_startup_check: true

    ##
    ## File System (Notification Provider)
    ##
    ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness
    ##
    # filesystem:
    # filename: /config/notification.txt

    ##
    ## SMTP (Notification Provider)
    ##
    ## Use a SMTP server for sending notifications. Authelia uses the PLAIN or LOGIN methods to authenticate.
    ## [Security] By default Authelia will:
    ##   - force all SMTP connections over TLS including unauthenticated connections
    ##      - use the disable_require_tls boolean value to disable this requirement
    ##        (only works for unauthenticated connections)
    ##   - validate the SMTP server x509 certificate during the TLS handshake against the hosts trusted certificates
    ##     (configure in tls section)
  smtp:
    address: smtp://127.0.0.1:25
    # timeout: 5s
    # username: test
    # password: password
    sender: "Syncloud <auth@{{ .Domain }}>"
    # identifier: localhost
    subject: "[Syncloud] {title}"
    # startup_check_address: test@authelia.com
    # disable_require_tls: false
    # disable_html_emails: false

identity_providers:
  oidc:
    hmac_secret: {{ .HmacSecret }}
    jwks:
      - key_id: 'syncloud'
        algorithm: 'RS256'
        use: 'sig'
        key: {{"{{"}} secret "/var/snap/platform/current/authelia.jwks.key" | mindent 10 "|" | msquote {{"}}"}}
    enable_client_debug_messages: false
    minimum_parameter_entropy: 8
    enforce_pkce: 'public_clients_only'
    enable_pkce_plain_challenge: false
    enable_jwt_access_token_stateless_introspection: false
    discovery_signed_response_alg: 'none'
    discovery_signed_response_key_id: ''
    require_pushed_authorization_requests: false
    authorization_policies:
      policy_name:
        default_policy: 'one_factor'
        rules:
          - policy: 'deny'
            subject: 'group:services'
    lifespans:
      access_token: '1h'
      authorize_code: '1m'
      id_token: '1h'
      refresh_token: '90m'
    cors:
      endpoints:
        - 'authorization'
        - 'token'
        - 'revocation'
        - 'introspection'
      allowed_origins:
        - 'https://{{ .Domain }}'
      allowed_origins_from_client_redirect_uris: false
    clients:
      - client_id: 'syncloud'
        public: true
        require_pkce: true
        pkce_challenge_method: 'S256'
        redirect_uris:
          - 'http://localhost/callback'
        scopes:
          - 'offline_access'
          - 'groups'
        requested_audience_mode: 'implicit'
        grant_types:
          - 'authorization_code'
          - 'refresh_token'
        response_types:
          - 'code'
        response_modes:
          - 'form_post'
        consent_mode: 'explicit'
        require_pushed_authorization_requests: true
        token_endpoint_auth_method: 'none'
        authorization_policy: 'one_factor'

{{ range $key, $value := .OIDCClients }}
      - client_id: '{{ .ID }}'
        client_secret: '{{ .Secret }}'
        public: false
        authorization_policy: 'one_factor'
        redirect_uris:
          - '{{ .RedirectURI }}'
        scopes:
          - 'openid'
          - 'email'
          - 'profile'
          - 'groups'
        grant_types:
          - refresh_token
          - authorization_code
        response_types:
          - code
        response_modes:
          - form_post
          - query
          - fragment
        token_endpoint_auth_method: '{{ .TokenEndpointAuthMethod }}'
{{ end }}
...
